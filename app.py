import streamlit as st # Strealist: A library that powers the web app, it bulids forms and button.
from pdf_parser import parse_pdf # It's importing parse_pdf from another fil called pdf_parser
from filters import filter_books # Importing a function that filters books
from langchain_helper import generate_lesson_plan # AI Does Work! Langchain is used to generate a custon lesson plan
from db import save_search # Saves the search input

st.set_page_config(page_title="AI Book Boss", layout="wide") #  Sets up the title of the Streamlit web page and makes the layout wide so it uses the full browser width

st.title("ðŸ“š AI Book Boss") # This adds a page title
st.write("This is a digital assistant that acts like a genius librarian meets a curriculum builder.") # This adds a small description

# Load the PDF book list (this is just a placeholder for now)
BOOKS = [{"title": "Sample Book", "grade": "5", "subject": "Science", "theme": "Innovation", "description": "A sample description."}]

# Simple form
grade = st.selectbox("Select Grade Level:", ["Kindergarten", "1st Grade", "2nd Grade", "3rd Grade", "4th Grade", "5th Grade"]) # Dropdown to pick a grade
subject = st.selectbox("Select Subject:", ["Reading", "Writing", "Math", "Science", "Social Studies", "Phonics", "STEAM", "STEM", "Art", "Technology", "Health", "Diversity and Cultural Studies", "Social-Emotional Learning"]) # Dropdown to pick a subject
theme = st.text_input("Enter Theme (e.g., Innovation)") # Text box to type in a theme

COLLECTION = [{"Title": "Sample Collection", "Grade": "5", "Subject": "Science", "Theme": "Innovation", "Description": "A sample description."}]

if st.button("Buy a Book Collection"):
    collectionChosen = st.selectbox("Which collection would you like to purchase?", [COLLECTION])

if st.button("Generate Book List"): # If this button is pushed the code inside runs...
    st.success(f"Generated book list for Grade {grade}, {subject} Theme: {theme}") # This is a green success button, reassuring that the book list was created
    st.write(BOOKS[0]) # Shows the first book in BOOKS
    lesson_plan = generate_lesson_plan(BOOKS[0]["title"], grade, subject, theme) # This sends the title, grade, subject, and theme to your LangChain helper function, and it returns a lesson plan generated by AI.
    st.write(f"Lesson Plan: {lesson_plan}") # Shows the generated lesson plan

    save_search(grade, subject, theme) # Saves what the user searched for

# Testing for using keyword component
st.title("ðŸ“š Book Finder by Keyword")
    keyword = st.text_input("Enter a keyword to search in the book descriptions: ")
    # Search for that keyword...
    if keyword:
        result = [] # Organize in a array
        for book in BOOKS:
            if keyword

